name: python-service

on:
  workflow_call:
    inputs:
      service_name:
        type: string
        required: true
      python_version:
        type: string
        required: false
        default: '3.13'
    secrets:
      WIF_PROVIDER:
        required: true
      WIF_SERVICE_ACCOUNT:
        required: true

env:
  REGION:         ${{ vars.REGION }}
  PROJECT_ID:     ${{ vars.PROJECT_ID }}
  CLOUD_RUN_SA:   ${{ vars.CLOUD_RUN_SA }}
  PYTHON_VERSION: ${{ inputs.python_version }}
  COV_MIN:        '70'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.service_name }}
  cancel-in-progress: true

permissions:
  contents: write
  id-token: write

jobs:
  # ---- CI: PR a main/develop y push a main/develop ----
  ci:
    if: |
      (github.event_name == 'pull_request' &&
       (github.event.pull_request.base.ref == 'main' ||
        github.event.pull_request.base.ref == 'develop')) ||
      (github.event_name == 'push' &&
       (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'))
    name: Lint & Tests & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pip install -U pip poetry

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}

      - name: Install dependencies (dev)
        run: poetry install

      # ---------- Tests ----------
      - name: Run tests (generate coverage.xml)
        env:
          PYTHONPATH: src
        run: |
          poetry run pytest \
            --cov=src \
            --cov-report=term-missing:skip-covered \
            --cov-report=xml


      # ---------- Coverage gate ----------
      - name: Enforce coverage >= 80%
        run: |
          python - <<'PY'
          import sys, xml.etree.ElementTree as ET
          t = ET.parse('coverage.xml'); r = t.getroot()
          rate = float(r.attrib.get('line-rate', 0.0)) * 100.0
          print(f"Coverage: {rate:.2f}%")
          if rate + 1e-9 < float("${{ env.COV_MIN }}"):
              print("FAIL: coverage below threshold"); sys.exit(1)
          PY

      - name: Upload coverage.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.sha }}
          path: coverage.xml
          if-no-files-found: ignore

  cd:
    name: Build & Deploy (push to master only)
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Auth ----------
      - name: Auth to GCP (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2


      - name: Docker login to Artifact Registry
        run: gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

      - name: Determine next semantic version (patch bump)
        id: semver
        run: |
          git fetch --tags --force
          # Obtener el último tag válido semver (vX.Y.Z o X.Y.Z)
          LAST_TAG=$(git tag --list --sort=-v:refname | grep -E '^(v)?[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || true)
          if [ -z "$LAST_TAG" ]; then
            NEXT_VERSION="0.0.1"
          else
            # Quitar prefijo v si existe
            BASE="${LAST_TAG#v}"
            IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"
            PATCH=$((PATCH + 1))
            NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Create & push git tag
        if: steps.semver.outputs.next_version != ''
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ env.NEXT_VERSION }}" -m "Release v${{ env.NEXT_VERSION }}"
          git push origin "v${{ env.NEXT_VERSION }}"

      # ---------- Build ----------
      - name: Build image
        env:
          IMAGE_REPO: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/project-images/${{ inputs.service_name }}
        run: |
          IMAGE_VERSION="${{ env.NEXT_VERSION }}"
          IMAGE="${IMAGE_REPO}:${IMAGE_VERSION}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "IMAGE_LATEST=${IMAGE_REPO}:latest" >> $GITHUB_ENV
          docker build -t "$IMAGE" .

      # ---------- Push ----------
      - name: Push image (version + latest)
        run: |
          docker tag  "$IMAGE" "$IMAGE_LATEST"
          docker push "$IMAGE"
          docker push "$IMAGE_LATEST"

      # ------- Verify SA ----------

      - name: Check runtime SA exists
        run: |
          gcloud iam service-accounts describe "${{ env.CLOUD_RUN_SA }}" \
            --project "${{ env.PROJECT_ID }}" \
            --format="value(email)"

      - name: Resolve image digest
        id: digest
        env:
          IMAGE_REPO: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/project-images/${{ inputs.service_name }}
        run: |
          DIGEST=$(gcloud artifacts docker images describe "${IMAGE_REPO}:latest" \
            --format="get(image_summary.digest)")
          echo "IMAGE_REF=${IMAGE_REPO}@${DIGEST}" >> $GITHUB_ENV

      - name: Deploy new revision (no traffic)
        run: |
          gcloud run deploy "${{ inputs.service_name }}" \
            --project "${{ env.PROJECT_ID }}" \
            --region  "${{ env.REGION }}" \
            --image   "${IMAGE_REF}"

 #---------------------------------------------  NICE TO HAVE -------------------------------------------



       # POSIBLE CONFIGURACIÓN PARA DESPLIEGUES DEL TIPO BLUE GREEN

      # Detecta la tag activa y calcula la "nueva" (flip blue/green)
#      - name: Pick next color (flip blue/green)
#        id: pick
#        run: |
#          SVC="${{ inputs.service_name }}"
#          REGION="${{ env.REGION }}"
#          # tag actual con 100% (puede estar vacío si es la 1a vez)
#          CUR=$(gcloud run services describe "$SVC" --region "$REGION" \
#                --format='value(status.trafficStatuses[?percent=100].tag)' || true)
#          if [ "$CUR" = "blue" ]; then NEXT="green"; else NEXT="blue"; fi
#          echo "current=$CUR, next=$NEXT"
#          echo "NEXT_TAG=$NEXT" >> $GITHUB_ENV
#
#      # 1) Deploy nueva revisión con TAG y sin enviar tráfico
#      - name: Deploy new revision (no traffic)
#        run: |
#          gcloud run deploy "${{ inputs.service_name }}" \
#            --project "${{ env.PROJECT_ID }}" \
#            --region  "${{ env.REGION }}" \
#            --image   "${IMAGE}" \
#            --tag     "${NEXT_TAG}" \
#            --no-traffic \
#            --quiet
#
#      # 2) Obtener URL etiquetada y hacer smoke test
#      - name: Smoke test on tagged URL
#        run: |
#          SVC="${{ inputs.service_name }}"
#          REGION="${{ env.REGION }}"
#          TAG="${NEXT_TAG}"
#          URL=$(gcloud run services describe "$SVC" --region "$REGION" \
#                --format="value(status.trafficStatuses[?tag='${TAG}'].url)")
#          echo "Testing $URL/health ..."
#          # Ajusta el endpoint de health si es distinto
#          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/public/v1/health")
#          echo "Status: $HTTP_STATUS"
#          test "$HTTP_STATUS" = "200"
#
#      # 3) Promocionar atómicamente la tag a 100%
#      - name: Promote traffic to new color
#        run: |
#          gcloud run services update-traffic "${{ inputs.service_name }}" \
#            --project "${{ env.PROJECT_ID }}" \
#            --region  "${{ env.REGION }}" \
#            --to-tags "${NEXT_TAG}=100" \
#            --quiet
