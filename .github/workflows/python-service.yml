name: python-service

on:
  workflow_call:
    inputs:
      service_name:   { type: string, required: true }
      python_version: { type: string, required: false, default: '3.13' }
    secrets:
      WIF_PROVIDER:        { required: true }
      WIF_SERVICE_ACCOUNT: { required: true }

permissions:
  contents: read
  id-token: write

env:
  REGION:         ${{ vars.REGION }}
  PROJECT_ID:     ${{ vars.PROJECT_ID }}
  CLOUD_RUN_SA:   ${{ vars.CLOUD_RUN_SA }}
  PYTHON_VERSION: ${{ inputs.python_version }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.service_name }}
  cancel-in-progress: true

jobs:
  # -------------------- CI: lint + tests con cobertura --------------------
  ci:
    name: Lint & Tests (>=80% cobertura)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Instalar Poetry
        run: pip install -U pip poetry

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}

      - name: Instalar dependencias (incluye dev)
        run: poetry install

      - name: Lint (ruff)
        run: |
          pip install ruff
          ruff check .

      - name: Tests con cobertura (falla si <80%)
        run: |
          # Usa pytest-cov; agrega en tu pyproject: [tool.poetry.group.dev.dependencies] pytest-cov
          poetry run pytest \
            --cov=src \
            --cov-report=term-missing:skip-covered \
            --cov-report=xml \
            --cov-fail-under=80

      - name: Publicar coverage.xml (artefacto)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.sha }}
          path: coverage.xml
          if-no-files-found: ignore

  # -------------------- CD: build & deploy (solo push a master) --------------------
  cd:
    name: Build & Deploy a Cloud Run (master)
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - uses: google-github-actions/setup-gcloud@v2

      - name: Login a Artifact Registry
        run: gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

      - name: Build & Push imagen
        env:
          IMAGE_REPO: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/s
