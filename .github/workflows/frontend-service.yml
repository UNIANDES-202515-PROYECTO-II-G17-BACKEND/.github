name: frontend-service
on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      node_version:
        required: false
        type: string
        default: '24'
    secrets:
      WIF_PROVIDER:
        required: true
      WIF_SERVICE_ACCOUNT:
        required: true

permissions:
  contents: write
  id-token: write

env:
  REGION:       ${{ vars.REGION }}
  PROJECT_ID:   ${{ vars.PROJECT_ID }}
  CLOUD_RUN_SA: ${{ vars.CLOUD_RUN_SA }}
  COV_MIN:      '80'

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm
      - run: npm ci
      - run: npm run test
      - name: Enforce coverage
        run: |
          echo "Buscando coverage-final.json..."
          FILE=$(find . -type f -name "coverage-final.json" | head -n 1)
          if [ -z "$FILE" ]; then
            echo "coverage-final.json no encontrado"
            echo "Posibles rutas:"
            find . -type f -path "*/coverage/*" || true
            exit 1
          fi
      
          echo "Archivo encontrado en: $FILE"
          COVER=$(node -pe "const f=require('$FILE'); Math.round((f.total?.lines?.pct)||0)")
          echo "Coverage: ${COVER}%"
      
          # üî• Usar un if en lugar de corchetes sueltos (para evitar fallar con set -e)
          if [ "$COVER" -lt "${{ env.COV_MIN }}" ]; then
            echo "‚ùå FAIL: coverage below threshold (${COVER}% < ${{ env.COV_MIN }}%)"
            exit 1
          else
            echo "‚úÖ OK: coverage gate passed (${COVER}% ‚â• ${{ env.COV_MIN }}%)"
          fi


  cd:
    name: Build & Deploy (push to master only)
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Auth ----------
      - name: Auth to GCP (WIF)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2


      - name: Docker login to Artifact Registry
        run: gcloud auth configure-docker "${{ env.REGION }}-docker.pkg.dev" --quiet

      - name: Determine next semantic version (patch bump)
        id: semver
        run: |
          git fetch --tags --force
          # Obtener el √∫ltimo tag v√°lido semver (vX.Y.Z o X.Y.Z)
          LAST_TAG=$(git tag --list --sort=-v:refname | grep -E '^(v)?[0-9]+\.[0-9]+\.[0-9]+$' | head -n1 || true)
          if [ -z "$LAST_TAG" ]; then
            NEXT_VERSION="0.0.1"
          else
            # Quitar prefijo v si existe
            BASE="${LAST_TAG#v}"
            IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"
            PATCH=$((PATCH + 1))
            NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Create & push git tag
        if: steps.semver.outputs.next_version != ''
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ env.NEXT_VERSION }}" -m "Release v${{ env.NEXT_VERSION }}"
          git push origin "v${{ env.NEXT_VERSION }}"

      # ---------- Build ----------
      - name: Build image
        env:
          IMAGE_REPO: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/project-images/${{ inputs.service_name }}
        run: |
          IMAGE_VERSION="${{ env.NEXT_VERSION }}"
          IMAGE="${IMAGE_REPO}:${IMAGE_VERSION}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "IMAGE_LATEST=${IMAGE_REPO}:latest" >> $GITHUB_ENV
          docker build -t "$IMAGE" .

      # ---------- Push ----------
      - name: Push image (version + latest)
        run: |
          docker tag  "$IMAGE" "$IMAGE_LATEST"
          docker push "$IMAGE"
          docker push "$IMAGE_LATEST"

      # ------- Verify SA ----------

      - name: Check runtime SA exists
        run: |
          gcloud iam service-accounts describe "${{ env.CLOUD_RUN_SA }}" \
            --project "${{ env.PROJECT_ID }}" \
            --format="value(email)"

      - name: Resolve image digest
        id: digest
        env:
          IMAGE_REPO: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/project-images/${{ inputs.service_name }}
        run: |
          DIGEST=$(gcloud artifacts docker images describe "${IMAGE_REPO}:latest" \
            --format="get(image_summary.digest)")
          echo "IMAGE_REF=${IMAGE_REPO}@${DIGEST}" >> $GITHUB_ENV

      - name: Deploy new revision (no traffic)
        run: |
          gcloud run deploy "${{ inputs.service_name }}" \
            --project "${{ env.PROJECT_ID }}" \
            --region  "${{ env.REGION }}" \
            --image   "${IMAGE_REF}"